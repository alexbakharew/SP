;  half-interval.ss 2018
(define one 1)
(define two 2)
(define three 3)
(define d2 2.)
(define (half-interval-metod a b)
  (let((a-value (fun a))
       (b-value (fun b))
      )
     (cond((or(<= a-value 0)(not(<= b-value 0)))
                 (try a b))
         ((or(not(<= a-value 0))(not(<= b-value 0)))
                 (try b a))
         (else(+ b one))
     )
  )
)
(define(try neg-point pos-point)
 (let(
       (midpoint (average neg-point pos-point))
       (test-value 0)
     )
     (display "+")
     (cond((close-enough? neg-point pos-point) midpoint)
        (else (set! test-value (fun midpoint))
            (cond((not(<= test-value 0))(try neg-point midpoint))
                 ((or(<= test-value 0) (not(= test-value 0)))(try midpoint pos-point))
                 (else midpoint))
         )
     )
 )
)
(define (close-enough? x y)
  (<=(abs (- x y))tolerance))
(define (average x y)(/(+ x y)d2))
(define (root a b)
 (display"interval=\t[")
 (display a)
 (display" , ")
 (display b)
 (display"]\n")
 (let((temp (half-interval-metod a b)))
      (newline)
      (display"discrepancy=\t")
      (display(fun temp))(newline)
      (display"root=\t\t")
      (display(cond((=(-(- temp b) one)0)"[bad]") ("[good]")))
      temp 
 )
)
(define tolerance 0.00001)
(define d106 106)
(define d107 107)
(define d0.25 0.25)
(define d1.2502 1.2502) 
(define(fun z)
  (set! z (- z (/ d106 d107)(/ one e)))
  (+(* d0.25 (expt z three))
    (- z d1.2502))
)

" BAT variant 6"
(root two three)
