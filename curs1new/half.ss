;  half-interval.ss 2018

(define one 1)
(define two 2.0)
(define thirty 30)
(define thirtyone 31)
(define five 5)
(define three 3)
(define four 4)
(define seven 7)

(define (half-interval-metod a b)
  (let((a-value (fun a))
       (b-value (fun b))
      )
     (cond((or(<= a-value 0)(<= b-value 0))
                 (try a b))
         ((or(<= a-value 0)(<= b-value 0))
                 (try b a))
         (else(+ b one))
     )
  )
)


(define(try neg-point pos-point)
 (let(
       (midpoint (average neg-point pos-point))
       (test-value 0)
     )
     (display "+")
     (cond((close-enough? neg-point pos-point) midpoint)
        (else (set! test-value (fun midpoint))
            (cond((not(<= test-value 0))(try neg-point midpoint))
                 (else (cond
                 ((not(<= 0 test-value))(try midpoint pos-point))
                 (else midpoint))
                 )
            )
        )
     )
 )
)

(define (close-enough? x y)
  (not(<= tolerance (abs (- x y)))))
(define (average x y)(* (+ x y) (/ two)))
(define (root a b)
 (display"interval=\t[")
 (display a)
 (display" , ")
 (display b)
 (display"]\n")
 (let((temp (half-interval-metod a b))(x 0))
      (newline)
      (display"discrepancy=\t")
      (display(fun temp))(newline)
      (display"root=\t\t")
      (set! x (cond((= (- (- temp b) one)0)(display "[bad]") one)(else (display "[good]") two)))
      temp
 )
)
(define tolerance 0.00001)
(define d106 106)
(define d107 107)
(define d025 0.25)
(define d12502 1.2502) 
(define(fun z)
  (set! z (-(- z (/ d106 d107))(/ one e)))
  (+(* d025 (expt z three))
    (- z d12502))
)

" BAT variant 6"
(root two three)